// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

// for people who want stable
/*plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.1"
}*/

// define the properties file
ext.configFile = file "build.properties"
configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group = config.group_name
archivesBaseName = "[${config.minecraft_version}]${config.mod_id}"
/*def commonManifest = {
    attributes 'FMLAT': 'steamnsteel_at.cfg'
}*/

minecraft {
    version = config.minecraft_version + "-" + config.forge_version // grab latest forge
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20151025"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    replace '@MOD_VERSION@', version
    replace '@API_VERSION@', config.api_version
}

repositories {
    maven {
        name = "ChickenBones"
        url = "http://chickenbones.net/maven/"
    }
    maven { //waila
        name "Mobius"
        url "http://mobiusstrip.eu/maven"
    }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    provided "codechicken:CodeChickenLib:${config.minecraft_version}-${config.codechicken_lib_version}:dev"
    provided "codechicken:CodeChickenCore:${config.minecraft_version}-${config.codechicken_core_version}:dev"
    provided "codechicken:NotEnoughItems:${config.minecraft_version}-${config.codechicken_nei_version}:dev"
    provided "mcp.mobius.waila:Waila:${config.waila_version}_${config.waila_minecraft_version}"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'
                
        // replace version and mcversion
        expand ([
            'version':project.version, 
            'mcversion':project.minecraft.version,
            'forge_version': config.forge_version
           ])
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    classifier = 'universal'
    //manifest commonManifest
}

// add a source jar
/*task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    appendix = 'deobf'
    classifier = 'src'
}*/

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = 'deobf'
}

apply plugin: 'java'
apply plugin: 'idea'

idea {
  project {
    languageLevel = '1.7'
  }
}

task copyChicken(type: Copy, dependsOn: "extractUserdev") {
    from { configurations.compile }
    include "**/*Chicken*.jar", "**/*NotEnoughItems*.jar"
    exclude "**/CodeChickenLib*" // because CCC downloads it anyways.. -_-
    into file("./run/mods") // paralell to the assets dir
    //mustRunAfter "deobfBinJar"
    //mustRunAfter "repackMinecraft"
}
tasks.setupDevWorkspace.dependsOn copyChicken
tasks.setupDecompWorkspace.dependsOn copyChicken